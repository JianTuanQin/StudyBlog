// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protoFile.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct IntClass {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var int1: Int32 = 0

  var int2: Int32 = 0

  var int3: Int32 = 0

  var int4: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FloatClass {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var float1: Float = 0

  var float2: Float = 0

  var float3: Float = 0

  var float4: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StringClass {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var string1: String = String()

  var string2: String = String()

  var string3: String = String()

  var string4: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension IntClass: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IntClass"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "int1"),
    2: .same(proto: "int2"),
    3: .same(proto: "int3"),
    4: .same(proto: "int4"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.int1)
      case 2: try decoder.decodeSingularInt32Field(value: &self.int2)
      case 3: try decoder.decodeSingularInt32Field(value: &self.int3)
      case 4: try decoder.decodeSingularInt32Field(value: &self.int4)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.int1 != 0 {
      try visitor.visitSingularInt32Field(value: self.int1, fieldNumber: 1)
    }
    if self.int2 != 0 {
      try visitor.visitSingularInt32Field(value: self.int2, fieldNumber: 2)
    }
    if self.int3 != 0 {
      try visitor.visitSingularInt32Field(value: self.int3, fieldNumber: 3)
    }
    if self.int4 != 0 {
      try visitor.visitSingularInt32Field(value: self.int4, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: IntClass, rhs: IntClass) -> Bool {
    if lhs.int1 != rhs.int1 {return false}
    if lhs.int2 != rhs.int2 {return false}
    if lhs.int3 != rhs.int3 {return false}
    if lhs.int4 != rhs.int4 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FloatClass: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FloatClass"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "float1"),
    2: .same(proto: "float2"),
    3: .same(proto: "float3"),
    4: .same(proto: "float4"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.float1)
      case 2: try decoder.decodeSingularFloatField(value: &self.float2)
      case 3: try decoder.decodeSingularFloatField(value: &self.float3)
      case 4: try decoder.decodeSingularFloatField(value: &self.float4)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.float1 != 0 {
      try visitor.visitSingularFloatField(value: self.float1, fieldNumber: 1)
    }
    if self.float2 != 0 {
      try visitor.visitSingularFloatField(value: self.float2, fieldNumber: 2)
    }
    if self.float3 != 0 {
      try visitor.visitSingularFloatField(value: self.float3, fieldNumber: 3)
    }
    if self.float4 != 0 {
      try visitor.visitSingularFloatField(value: self.float4, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FloatClass, rhs: FloatClass) -> Bool {
    if lhs.float1 != rhs.float1 {return false}
    if lhs.float2 != rhs.float2 {return false}
    if lhs.float3 != rhs.float3 {return false}
    if lhs.float4 != rhs.float4 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StringClass: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StringClass"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "string1"),
    2: .same(proto: "string2"),
    3: .same(proto: "string3"),
    4: .same(proto: "string4"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.string1)
      case 2: try decoder.decodeSingularStringField(value: &self.string2)
      case 3: try decoder.decodeSingularStringField(value: &self.string3)
      case 4: try decoder.decodeSingularStringField(value: &self.string4)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.string1.isEmpty {
      try visitor.visitSingularStringField(value: self.string1, fieldNumber: 1)
    }
    if !self.string2.isEmpty {
      try visitor.visitSingularStringField(value: self.string2, fieldNumber: 2)
    }
    if !self.string3.isEmpty {
      try visitor.visitSingularStringField(value: self.string3, fieldNumber: 3)
    }
    if !self.string4.isEmpty {
      try visitor.visitSingularStringField(value: self.string4, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StringClass, rhs: StringClass) -> Bool {
    if lhs.string1 != rhs.string1 {return false}
    if lhs.string2 != rhs.string2 {return false}
    if lhs.string3 != rhs.string3 {return false}
    if lhs.string4 != rhs.string4 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
